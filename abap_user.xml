<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="lang_user.xslt"?>
<XMLConfigSettings>
	<FILEINFO>
		<Author>Alex Arseniev</Author>
		<Type>LangUser</Type>
		<Language>ABAP</Language>
		<Desc>User specific settings for ABAP</Desc>
	</FILEINFO>
	<EXPANDS>
		<Expand key="#stubdef">
			<Descr>#stubdef</Descr>
			<Text>INTERFACE lif_db.\n\n  METHODS:\n    |\n     \nENDINTERFACE.\n\nCLASS lcl_db DEFINITION  FINAL.\n\n  PUBLIC SECTION.\n    INTERFACES lif_db.\n\nENDCLASS.\n\nCLASS lcl_db_stub DEFINITION  FINAL.\n\n  PUBLIC SECTION.\n    INTERFACES lif_db.\n\nENDCLASS.</Text>
		</Expand>
		<Expand key="#salv">
			<Descr>#salv</Descr>
			<Text>DATA: salv_tab_ctrl  TYPE REF TO cl_salv_table,\n      salv_exception TYPE REF TO cx_salv_msg.\n\nTRY.\n    cl_salv_table=&gt;factory(\n          IMPORTING\n            r_salv_table = salv_tab_ctrl\n          CHANGING\n            t_table      = |\n        ).\n\n    salv_tab_ctrl-&gt;get_display_settings( )-&gt;set_striped_pattern( abap_true ).\n    salv_tab_ctrl-&gt;get_columns( )-&gt;set_optimize( abap_true ).\n    salv_tab_ctrl-&gt;get_functions( )-&gt;set_all( abap_true ).\n    \n    salv_tab_ctrl-&gt;display( ).\n\n  CATCH cx_salv_msg INTO salv_exception.\nENDTRY.</Text>
		</Expand>
		<Expand key="#dpcontdef">
			<Descr>#dpcontdef</Descr>
			<Text>CLASS lcl_dynpro_%screen_number% DEFINITION\n    CREATE PRIVATE\n    FINAL.\n\n  PUBLIC SECTION.\n\n    CLASS-METHODS:\n      get\n        RETURNING value(ro_self) TYPE REF TO lcl_dynpro_%screen_number%.\n\n    METHODS:\n      constructor,\n      pbo,\n      pai\n        IMPORTING\n          i_ok_code TYPE syucomm.\n\n  PRIVATE SECTION.\n\n    CLASS-DATA:\n       singleton_instance TYPE REF TO lcl_dynpro_%screen_number%.\n\n    DATA:\n       custom_container   TYPE REF TO cl_gui_custom_container.\n\n    METHODS:\n      do_init_controls.\n\nENDCLASS.</Text>
		</Expand>
		<Expand key="#aem">
			<Descr>#aem</Descr>
			<Text>cl_abap_unit_assert=&gt;assert_equals(\n    exp = |\n    act =\n    msg = \n  ).\n</Text>
		</Expand>
		<Expand key="#regflush">
			<Descr>#regflush</Descr>
			<Text>DATA: lo_register_flush TYPE REF TO zif_spot_db_register_flush.\n\n  lo_register_flush =\n    zcl_spot_db_factory=&gt;get_instance(\n      )-&gt;get_db_register_flush( ).\n\n  SET HANDLER me-&gt;on_register_flush\n    FOR lo_register_flush.</Text>
		</Expand>
		<Expand key="interface">
			<Descr>INTERFACE</Descr>
			<Text>INTERFACE |.\n\nENDINTERFACE.</Text>
		</Expand>
		<Expand key="#dpcontimp">
			<Descr>#dpcontimp</Descr>
			<Text>CLASS lcl_dynpro_%screen_number% IMPLEMENTATION.\n\n  METHOD get.\n\n    IF singleton_instance IS NOT BOUND.\n      CREATE OBJECT singleton_instance.\n    ENDIF.\n\n    ro_self = singleton_instance.\n  ENDMETHOD.\n\n\n  METHOD constructor.\n\n  ENDMETHOD.\n\n  METHOD pbo.\n\n    me-&gt;do_init_controls( ).\n\n  ENDMETHOD.\n\n  METHOD  pai.\n\n    CASE i_ok_code.\n      WHEN 'BACK' OR 'CANC'.\n        SET SCREEN 0.\n        LEAVE SCREEN.\n    ENDCASE.\n\n  ENDMETHOD.\n\n\n  METHOD do_init_controls.\n\n    IF me-&gt;custom_container IS BOUND.\n\n    " ToDo: Refresh Controls\n\n      RETURN.\n    ENDIF.\n\n    CREATE OBJECT me-&gt;custom_container\n      EXPORTING\n        container_name = 'CCONTAINER_%screen_number%'.\n\n    " ToDo: Initialize Controls\n\n  ENDMETHOD.\n\nENDCLASS.</Text>
		</Expand>
		<Expand key="#apidef">
			<Descr>#apidef</Descr>
			<Text>INTERFACE lif_api.\n\nENDINTERFACE.\n\nCLASS lcl_api DEFINITION FINAL.\n\n  PUBLIC SECTION.\n    INTERFACES lif_api.\n\nENDCLASS.\n\nCLASS lcl_api_stub DEFINITION FINAL.\n\n  PUBLIC SECTION.\n    INTERFACES lif_api.\n\nENDCLASS.</Text>
		</Expand>
		<Expand key="ife">
			<Descr>If (§) Else</Descr>
			<Text>IF |.\n%SurroundedText%\nELSE.\n\nENDIF.</Text>
		</Expand>
		<Expand key="try">
			<Descr>Try (§)</Descr>
			<Text>TRY |.\n%SurroundedText%\nCATCH .\n\nENDTRY.</Text>
		</Expand>
		<Expand key="define">
			<Descr>Define (§)</Descr>
			<Text>DEFINE |.\n%SurroundedText%\nEND-OF-DEFINITION.</Text>
		</Expand>
		<Expand key="#pai"><Descr>#pai</Descr><Text>CASE i_ok_code.\n      WHEN 'BACK' OR 'CANC'.\n        SET SCREEN 0.\n        LEAVE SCREEN.\n    ENDCASE.</Text></Expand><Expand key="loop"><Descr>Loop (§)</Descr><Text>LOOP AT |.\n%SurroundedText%\nENDLOOP.</Text></Expand><Expand key="#atc"><Descr>#atc</Descr><Text>cl_abap_unit_assert=&gt;assert_table_contains(\n        line  = %line%\n        table = %table%\n      ).</Text></Expand><Expand key="#otrtext"><Descr>#otrtext</Descr><Text>cl_wd_utilities=&gt;get_otr_text_by_alias( '|' )</Text></Expand><Expand key="#excimp"><Descr>#excimp</Descr><Text>*----------------------------------------------------------------------*\n*       CLASS %local_exception_class_name% IMPLEMENTATION\n*----------------------------------------------------------------------*\nCLASS %local_exception_class_name% IMPLEMENTATION.\n\n  METHOD constructor.\n\n    super-&gt;constructor( ).\n\n    me-&gt;if_t100_message~t100key-msgid  = c_msgid.\n    me-&gt;if_t100_message~t100key-msgno  = c_msgno.\n\n    " ToDo: Message-Variablen mappen\n\n  ENDMETHOD.                    "constructor\n\nENDCLASS.                    "%local_exception_class_name% IMPLEMENTATION</Text></Expand><Expand key="region"><Descr>Region (§)</Descr><Text>"$. Region %Region Name%\n%SurroundedText%\n"$. Endregion %Region Name%</Text></Expand><Expand key="rv"><Descr>RV</Descr><Text>RETURNING VALUE(r_|)</Text></Expand><Expand key="#singleton"><Descr>#singleton</Descr><Text>\n  IF o_instance IS NOT BOUND.\n    CREATE OBJECT o_instance.\n  ENDIF.\n\n  ro_instance = o_instance.\n</Text></Expand><Expand key="#atm"><Descr>#atm</Descr><Text>cl_abap_unit_assert=&gt;assert_text_matches(\n        pattern = \n        text    = \n      ).</Text></Expand><Expand key="ctor"><Descr>ctor</Descr><Text>CONSTRUCTOR</Text></Expand><Expand key="if"><Descr>If (§)</Descr><Text>IF |.\n%SurroundedText%\nENDIF.</Text></Expand><Expand key="ft"><Descr>FT</Descr><Text>FOR TESTING</Text></Expand><Expand key="#ai"><Descr>#ai</Descr><Text>cl_abap_unit_assert=&gt;assert_initial( | ).</Text></Expand><Expand key="#abm"><Descr>#abm</Descr><Text>cl_abap_unit_assert=&gt;assert_bound(\n    act = |\n    msg = \n  ).</Text></Expand><Expand key="#co"><Descr>#co</Descr><Text>CREATE OBJECT |</Text></Expand><Expand key="#af"><Descr>#af</Descr><Text>cl_abap_unit_assert=&gt;fail( '|' ).</Text></Expand><Expand key="#ae"><Descr>#ae</Descr><Text>cl_abap_unit_assert=&gt;assert_equals(\n    exp = |\n    act =\n  ).\n</Text></Expand><Expand key="#ro"><Descr>#ro</Descr><Text>READ-ONLY</Text></Expand><Expand key="case"><Descr>Case (§)</Descr><Text>CASE |.\n	WHEN .\n	WHEN .\n	WHEN OTHERS.\nENDCASE.</Text></Expand><Expand key="#wdnoborder"><Descr>#wdnoborder</Descr><Text>DATA: lo_window_controller  TYPE REF TO if_wd_window_controller,\n        lo_window_info        TYPE REF TO if_wd_rr_window.\n\n  lo_window_controller ?= wd_this-&gt;wd_get_api( ).\n  lo_window_info ?= lo_window_controller-&gt;get_window_info( ).\n\n  lo_window_info-&gt;set_custom_padding( abap_true ).</Text></Expand><Expand key="#ani"><Descr>#ani</Descr><Text>cl_abap_unit_assert=&gt;assert_not_initial( | ).</Text></Expand><Expand key="#ab"><Descr>#ab</Descr><Text>cl_abap_unit_assert=&gt;assert_bound( | ).</Text></Expand><Expand key="tr"><Descr>TR</Descr><Text>TYPE REF TO |</Text></Expand><Expand key="#excdef"><Descr>#excdef</Descr><Text>*----------------------------------------------------------------------*\n*       CLASS %local_exception_class_name% DEFINITION\n*----------------------------------------------------------------------*\nCLASS %local_exception_class_name% DEFINITION\n    INHERITING FROM cx_no_check\n    FINAL.\n\n  PUBLIC SECTION.\n\n    CONSTANTS:\n      c_msgid TYPE msgid  VALUE '%msgid%',\n      c_msgno TYPE msgno  VALUE '%msgno%'.\n\n    INTERFACES:\n      if_t100_message.\n\n\n    METHODS:\n      constructor.\n\nENDCLASS.                    "%local_exception_class_name% DEFINITION</Text></Expand><Expand key="t"><Descr>TYPE</Descr><Text>TYPE</Text></Expand><Expand key="method"><Descr>METHOD</Descr><Text>METHOD |.\n\nENDMETHOD.</Text></Expand><Expand key="#nimp"><Descr>#nimp</Descr><Text>" ToDo: implementieren\n  RAISE EXCEPTION TYPE zcx_spot_not_implemented.</Text></Expand><Expand key="do"><Descr>Do (§)</Descr><Text>DO | TIMES.\n%SurroundedText%\nENDDO.</Text></Expand><Expand key="*--"><Descr>*-------...</Descr><Text>*--------------------------------------------------------------------*</Text></Expand><Expand key="#ltcl"><Descr>#ltcl</Descr><Text>CLASS %local Test-Classname% DEFINITION \n    FOR TESTING\n    DURATION SHORT\n    RISK LEVEL HARMLESS\n    FINAL.\n\n  PRIVATE SECTION.\n\nENDCLASS.\n\nCLASS %local Test-Classname% IMPLEMENTATION.\n\n\nENDCLASS.\n</Text></Expand><Expand key="***"><Descr>***.....</Descr><Text>**********************************************************************</Text></Expand><Expand key="#changeset"><Descr>#changeset</Descr><Text>TYPES: BEGIN OF lts_changeset,\n          datum TYPE datum,\n          uzeit TYPE uzeit,\n          uname TYPE uname,\n       END OF lts_changeset.</Text></Expand><Expand key="while"><Descr>While (§)</Descr><Text>WHILE |.\n%SurroundedText%\nENDWHILE.</Text></Expand><Expand key="#msg"><Descr>#msg</Descr><Text>MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.</Text></Expand><Expand key="#pnt"><Descr>#pnt</Descr><Text>##no_text</Text></Expand><Expand key="#at"><Descr>#at</Descr><Text>cl_aunit_assert=&gt;assert_that(\n    exp = |\n    act =\n  ).\n</Text></Expand><Expand key="#stubimp"><Descr>#stubimp</Descr><Text>CLASS lcl_db IMPLEMENTATION.\n\n\nENDCLASS.\n\nCLASS lcl_db_stub IMPLEMENTATION.\n\n\nENDCLASS.</Text></Expand><Expand key="#as"><Descr>#as</Descr><Text>cl_abap_unit_assert=&gt;assert_subrc( sy-subrc ).|</Text></Expand><Expand key="#pnst"><Descr>#pnst</Descr><Text>"#EC CI_NESTED</Text></Expand><Expand key="#itl"><Descr>#itl</Descr><Text>WHILE |-&gt;has_next( ) = abap_true.\n\nENDWHILE.</Text></Expand><Expand key="#apiimp"><Descr>#apiimp</Descr><Text>CLASS lcl_api IMPLEMENTATION.\n\nENDCLASS.\n\nCLASS lcl_api_stub IMPLEMENTATION.\n\nENDCLASS.</Text></Expand><Expand key="class"><Descr>CLASS</Descr><Text>CLASS |.\n  \nENDCLASS.</Text></Expand></EXPANDS>
</XMLConfigSettings>
